 Ausarbeitung für java: 
Ich habe beide bibliotheken , java swing und java aw benutzt, aber große Teil des Projekt ist mit awt gearbeitet
und ich habe auch javax benutzt , weil ich einfach ein Bild als Background gesetzt.
in mein Java Projekt habe ich 3 Klassen erstellt: 
-Hauptklasse , enthält nur main methode und füht das Programm aus
-Launchpage , spezifiert und beschreibt den haupt Fenster
-Cursor , spezifiert und beschreibt den Dialog Fenster. 

In Hauptklasse wird ein Launchpage Objekt erstellt.und dann ausgeführt. 

Wie oben erwähnt , Launchpage klasse definiert den Hauptfenster. Als erstet erbt die klasse von Jframe und implemntiert den ActionListener 
interface , um  Reaktionen ( zb Button drücken) zu reagieren. 
in den Konstruktor wird die eigenschaften von Fenster definiert , wie Name(Gui-Hausarbeit) , Größe(breite 350, laenge 250)
und default Standort .Wenn man den Fnester schließen möchte , soll er spezielle Anweisungen definieren , für den normal Close 
(also X)  wurde die setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE) angewendet, und auch für schließen durch alt+f4 habe ich auch addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent we) benutzt.
 Ein Windows Listener wird realisirt , in dieser Mtehode wird auch ein warning message
 erzeugt , wenn den Benutzer ertmal schlißen, falls er mit yes bestätigt, schließst sonst mahct nichts.: 
JOptionPane.showConfirmDialog(frame,
                        "Do you want to Exit ?", "Exit Confirmation : ",
                        JOptionPane.YES_NO_OPTION); frame ist aktuelle fenster , " " ist ein String , wo den Warning Text angezeigt wird ,dritte Parameter definiert den Type , wie hier nur YesNo.

mit no wird frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE); nichts gemacht , mit yes geshcloßen.

Zu nächst, habe den Background mit Th Köln Logo ersetzt , das dient nur zur Schönheit des Fenster.  
try {
            frame.setContentPane(new JLabel(new ImageIcon(ImageIO.read(new File("thkoeln.png")))));
        } catch (IOException e) {
            e.printStackTrace();

        }
Mit die einfache und eindeutige methode kann man den Fenster visible
frame.setVisible(true); . 

In Action Listener wird wie oben erklärt , falls den Benutzer den Button Schlißen drückt. schließt den Fenster. 
Wenn man aber das Menuitem Mousezeiger wählen , wird einen anderen Fenster(dialog) geöffnet. das passiert mit dem Aufruf von Cursor objekt, also c=new cursor. 
getFrame(), und Setczrsortitle() sind 2 hilfe metnoden , und beide hilfen bei Einsetzung des Zeigers global .

CursorKlasse:
in cursor klasse geschieht alles, nach dem Aufruf des Objekts( c) wird erstmal direkt einen Dialog mit ein Textfield  und 2 Buttons angezeigt. Ein Button ist Übernhemen, wo nach dem click den Mousezeiger angepasst wird , und die andere ist Schließen.
Dannach wird einen Jfilechooser geöffnet , wo den Benutzer ein Datei wählen kann . In Unsere Programm soll nur bmp File gewählt, ansosnt wird eine Fehlermeldung angezeigt.Ich habe gedacht, dass besser ist , wenn man die Datein zu bmp  mit Filter limitiert. 
Dann kann den Benutzer eigentlich jetzt nur bmp Datein wählen , da nur bmp  in Selector angezeigt. 
Die Aufgabestellung fordert , dass ich mindestens 2 bmp files erstelle . Aber ich habe auch dazu entschieden , dass ich den Benutzer die Möglichkeit  in Textfield anzupassen geben. Der Benutzer kann die Integrierte Mouse Zeigers einsetzen , nur mit der Name . Zb wenn er WAIT.bmp schreibt , wird den Zeiger als Loading Symbole angepasst. 
Ich habe explizit .bmp file eingesetzt , sodass er immer bmp Datein anpasst , und beim Fehler einen Warningbox anzeigen. Der Zeiger wird durch dialog.setCursor() in dialogbox anpassen , und mit der Methode Setcursortitel() global in hauptfenster auch .Am Ende  , wenn man Schließen klickt , wird einen Messagebox mit janein angezeigt , und warten auf Bestätigung . 

Am Ende  java awt und swing sind beide jetzt veraltet , und javafx ist die aktuelle  Bibliothek . Java Awt
ist Java ursprüngliches  , plattformabhängig Widget-Grafik und Gui  während Swing ein GUi Widget toolkit. Swing ist die Erweitung von AWT.
Ich habe vemerkt dass awt komponenten größer , brauchen mehr speicher , und die Ausführung ist langsam , während swing komponenten leichter sind , Ausführung schneller , und benötigt weniger Platz im Vergleich mit JavaAWT
Nach der kleine Unterscheidung zwsichen die beide , ich finde java swing besser, einfacher zur Benutzung. 
 Quelle: 
oracle.com
stackoverflow.
